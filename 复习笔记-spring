Spring

IoC解决了什么问题?
IoC的思想就是两方之间不互相依赖，由第三方容器来管理相关资源。这样有什么好处呢？对象之间的耦合度或者说依赖程度降低；资源变的容易管理；比如你用Spring容器提供的话很容易就可以实现一个单例。

@Autowired 和 @Resource 的区别是什么？
@Autowired 是 Spring 提供的注解，@Resource 是 JDK 提供的注解。
Autowired 默认的注入方式为byType（根据类型进行匹配），@Resource默认注入方式为 byName（根据名称进行匹配）。
当一个接口存在多个实现类的情况下，@Autowired和@Resource都需要通过名称才能正确匹配到对应的Bean。Autowired可以通过@Qualifier注解来显式指定名称，@Resource可以通过 name 属性来显式指定名称。
@Autowired 支持在构造函数、方法、字段和参数上使用。@Resource 主要用于字段和方法上的注入，不支持在构造函数或参数上使用。

Bean 的作用域有哪些?
singleton : IoC 容器中只有唯一的 bean 实例。Spring 中的 bean 默认都是单例的，是对单例设计模式的应用。
prototype : 每次获取都会创建一个新的 bean 实例。也就是说，连续 getBean() 两次，得到的是不同的 Bean 实例。
request （仅 Web 应用可用）: 每一次 HTTP 请求都会产生一个新的 bean（请求 bean），该 bean 仅在当前 HTTP request 内有效。
session （仅 Web 应用可用） : 每一次来自新 session 的 HTTP 请求都会产生一个新的 bean（会话 bean），该 bean 仅在当前 HTTP session 内有效。

Bean 的生命周期了解么?
阶段一 实例化，创建一个Bean实例
Bean 容器找到配置文件中 Spring Bean 的定义。
Bean 容器利用 Java Reflection API 创建一个 Bean 的实例。
阶段二 填充属性，为属性赋值（setter注入循环依赖的开始阶段）
如果涉及到一些属性值 利用 set()方法设置一些属性值。
进行AOP的处理
阶段三 初始化
如果 Bean 实现了 BeanNameAware 接口，调用 setBeanName()方法，传入 Bean 的名字。
如果 Bean 实现了 BeanClassLoaderAware 接口，调用 setBeanClassLoader()方法，传入 ClassLoader对象的实例。
如果 Bean 实现了 BeanFactoryAware 接口，调用 setBeanFactory()方法，传入 BeanFactory对象的实例。
与上面的类似，如果实现了其他 *.Aware接口，就调用相应的方法。
如果有和加载这个 Bean 的 Spring 容器相关的 BeanPostProcessor 对象，执行postProcessBeforeInitialization() 方法
如果 Bean 实现了InitializingBean接口，执行afterPropertiesSet()方法。
如果 Bean 在配置文件中的定义包含 init-method 属性，执行指定的方法。
如果有和加载这个 Bean 的 Spring 容器相关的 BeanPostProcessor 对象，执行postProcessAfterInitialization() 方法
（注意BeanPostProcessor是一个通用的bean初始化拦截器，不是针对某一个bean进行拦截，在拦截方法内可以根据beanName进行过滤需要处理的哪些bean）
阶段四 销毁
当要销毁 Bean 的时候，如果 Bean 实现了 DisposableBean 接口，执行 destroy() 方法。
当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的方法。
spring的bean生命周期包含很多扩展点，我们既可以使用注解也可以使用实现接口的方式来扩展，具体的执行顺序为setBeanName -> setApplicationContext -> postProcessBeforeInitianlization -> @PostConstruct -> afterPropertiesSet -> init-method -> postProcessAfterInitialization -> @PreDestroy -> destroy

除了BeanPostProcessor还有一个BeanFactoryPostProcessor，BeanFactoryPostProcessor是beanFactory的后置处理器，支持在bean factory初始化完成后，对bean factory进行一些额外的处理，这时所有的bean的描述信息都已经加载完毕，即所有的BeanDefinition都加载完成，但是还没有进行bean初始化。例如PropertyPlaceholderConfigurer就是在这个扩展点上对bean属性中的占位符进行替换。而BeanPostProcessor提供了在bean初始化之前和之后插入自定义逻辑的能力。这两个扩展点都可以实现Ordered接口来指定执行顺序。注意如果要控制bean之间的加载顺序要使用@dependOn注解，而不是@order注解。
ConfigurationClassPostProcessor也是一个BeanFactoryPostProcessor，它是spring boot提供的扫描注解并解析生成BeanDefinition的重要组件，如果想要某个bean在其他所有bean之前加载，可以自定义一个BeanFactoryPostProcessor并使其在ConfigurationClassPostProcessor之前运行把需要注册的bean的BeanDefinition提前塞进beanDefinitionNames集合中就可以了。

IOC的启动流程
我们可以把IOC的启动流程分为两个重要的阶段：
1.容器的启动阶段，主要包括加载bean的配置信息，解析配置信息，装配BeanDefinition以及后置处理，比如BeanFactoryPostProcessor。
2.Bean的实例化阶段，主要包括实例化对象，装配依赖，初始化对象，前置后置处理，比如BeanPostProcessor
在spring中，最基础的容器接口方法是由BeanFactory定义的，而BeanFactory的实现采用的是延迟加载，也就是说，容器启动时，只会进行第一个阶段的操作，当需要某个类的实例时，才会进行第二个阶段的操作。而ApplicationContext在启动容器时就完成了所有初始化，这样可以把bean创建过程中出现的问题提前暴露在启动阶段，也就是我们经常会在应用启动时出现bean加载错误导致应用启动失败的场景。

spring如何解决循环依赖？
首先，Spring解决循环依赖有两个前提条件：
1.不全是构造器的循环依赖 2.必须是单例
spring解决循环依赖靠的是三级缓存功能：
成品：一级缓存 singletonObjects ，用于保存实例化、注入、初始化完成的bean实例 。
半成品：二级缓存 earlySingletonObjects ，用于保存实例化完成的bean实例。
原材料工厂： 三级缓存 singletonFactories ，用于保存bean的创建工厂ObjectFactory，用于实现AOP并创建二级缓存中的对象
A对象创建过程：
1.创建对象A，实例化的时候把A对象工厂放入三级缓存
2.A注入属性时，发现依赖B，转而去实例化B
3.同样创建对象B，并把B对象工厂放入三级缓存，注入属性时发现依赖A，从一级一直查询到三级缓存，从三级缓存通过对象工厂拿到对象A的半成品，并把A的半成品放入二级缓存，同时删除三级缓存中的A对象工厂，此时，B已经实例化完成并且初始化完成，把B放入一级缓存。
4.继续创建A，顺利从一级缓存拿到实例化且初始化都完成的B对象，而A在完成属性注入后，会按照它本身的逻辑去进行AOP，而此时我们知道A对象已经经历过了AOP，所以对于A本身而言，不会再去进行 AOP了，对于A而言，进行了AOP的判断后，以及BeanPostProcessor的执行之后，就需要把A对应的对象放入singletonObjects中了，但是我们知道，应该是要A的代理对象放入singletonObjects 中，所以此时需要从二级缓存earlySingletonObjects中得到代理对象，然后放入singletonObjects中，也就是删除二级缓存中的A，同时把A放入一级缓存。
因此，由于把实例化和初始化的流程分开了，所以如果都是用构造器循环依赖的话，就没办法分离这两个操作，即在第一步实例化对象时就无法进行下去了，也就没办法解决循环依赖的问题了。
另外，对于prototype作用域的bean，Spring容器无法完成依赖注入，因为Spring容器不进行缓存prototype作用域的bean，因此无法提前暴露一个创建中的bean。
原因也挺好理解的，原型模式每次请求都会创建一个实例对象，即使加了缓存，循环引用太多的话，就比较麻烦了就，所以Spring不支持这种方式，直接抛出异常。

总结一下三级缓存：
1.「singletonObjects」：缓存某个beanName对应的经过了完整生命周期的bean；
2.「earlySingletonObjects」：缓存提前拿原始对象进行了AOP之后得到的代理对象，原始对象还没有进行属性注入和后续的BeanPostProcessor等生命周期；
3.「singletonFactories」：缓存的是一个ObjectFactory，主要用来去生成原始对象进行了AOP之后得到的「代理对象」，在每个Bean的生成过程中，都会提前暴露一个工厂，这个工厂可能用到，也可能用不到，如果没有出现循环依赖依赖本bean，那么这个工厂无用，本bean按照自己的生命周期执行，执行完后直接把本bean放入singletonObjects中即可，如果出现了循环依赖依赖了本bean，则另外那个bean执行 ObjectFactory提交得到一个AOP之后的代理对象（如果有 AOP 的话，如果无需 AOP ，则直接得到一个原始对象）。

如果没有二级缓存可不可以？
对于三级缓存中的ObjectFactory：
若对象不需要代理，每次从三级缓存中获取到的对象都是同一个对象，若对象需要代理，每次从三级缓存中获取到的代理对象都是一个新的实例，所以如果没有二级缓存的话，当多个线程同时从三级缓存中获取对象的话就打破了单例模式。

FactoryBean的作用
public interface IOrderService {
    void saveOrder();
}

public class OrderServiceImpl implements IOrderService {
    @Override
    public void saveOrder() {
        System.out.println("-----创建订单------");
    }
}

@Component
public class OrderFactoryBean implements FactoryBean {
    /**
     * 自定义bean的创建过程
     */
    @Override
    public Object getObject() throws Exception {
        System.out.println("-----调用OrderFactoryBean.getObject----");
        // 1、直接new
        IOrderService orderService = new OrderServiceImpl();
        return orderService;
    }
 
    @Override
    public Class<?> getObjectType() {
        return IOrderService.class;
 
    }
 
    @Override
    public boolean isSingleton() {
        return true;
    }
}

public class FactoryBeanTest {
    public static void main(String[] args) {
        AnnotationConfigApplicationContext context= new AnnotationConfigApplicationContext(MyConfig.class);
        //测试自定义FactoryBean实现getObject产生bean 
        IOrderService bean = context.getBean(IOrderService.class);
        System.out.println(bean);
        System.out.println(context.getBean("orderFactoryBean"));// bean是OrderServiceImpl,并不是OrderFactoryBean
    }
}
这个IOrderService接口和OrderServiceImpl实现类，我们并没有添加任何bean注解（只是普通的接口/类），但我们却能够通过context.getBean方法从IoC容器中获取到。context.getBean("orderFactoryBean")获取到的bean对象不是OrderFactoryBean对象本身，而是OrderFactoryBean.getObject方法中返回的对象OrderServiceImpl。

为什么需要使用FactoryBean呢？
对于 FactoryBean 而言，它提供了一种特殊创建 bean 的手段，能让我们将一个对象直接放入容器中，成为 Spring 所管理的一个 bean。
1.考虑下，如果需要实例化一个复杂Bean，按照传统方式，我们需要在<bean>中提供大量的配置信息，但这些信息还是我们不需要去关注的，我们只想要创建一个Bean，并不想知道这个Bean是经过多么复杂的流程创建出来的，这时就可以使用FactoryBean来把一些配置信息、依赖项进行封装在内部，很简单的来实例化一个Bean。

2.和第三方框架的整合，首先在第三方框架内部是不会出现像@Component这样的Spring注解，为什么呢？因为如果使用了@Component注解，是不是就要依赖Spring。第三方框架与Spring框架整合，就是需要将第三方框架中的类转化为BeanDefinition放到Spring容器中去，以注解或者XML形式都行。往往第三方类都有一个非常重要的类，我们只需要将这个类注入到Spring就可以了，不过这个类想要正常工作可能需要其他依赖，所以我们在Spring中想注入这个类，就需要先知道它依赖的其他类，可是其他类还会有依赖，这样做就太麻烦了，所以针对第三方框架我们可以写一个FactoryBean类，提供一个简单的入口和Spring框架进行整合，我们只需要将这个FactoryBean类以注解或XML的格式放到容器就可以了。（Mybatis集成入Spring就是这样）

如何把一个对象交给Spring管理？
首先要明白一点，怎么把一个对象交给Spring管理，"对象"要划重点，我们通常采用注解如@Compent或者XML配置这种类似操作并不能将一个对象交给Spring管理，而是让Spring根据我们的配置信息以及信息创建并管理了这个对象，形成了Spring中的一个bean，把一个对象交给Spring管理主要有两种方式：
1.就是用FactoryBean，我们直接在FactoryBean的getObject方法直接返回需要被管理的对象即可
2.@Bean注解，通过@Bean注解标志的方法直接返回需要被管理的对象即可。

FactoryBean和javaConfig中的@Bean的区别？
这两者的作用非常相似，spring3.0版本引入的@Bean注解，在这之前如果想要在java代码中创建bean只能使用FactoryBean，最重要的一点是@Bean是固定返回某一个bean，是静态创建bean，但FactoryBean可以动态地创建bean，getObject()可以根据不同条件返回任意一个bean对象，并把创建好的bean加入到spring容器中，如果我们给FactoryBean添加一个动态的属性，在getObject()方法内部根据这个属性控制生成bean的逻辑，这样每次调用前set不同的属性就可以生成不同的bean到spring容器中，从而实现批量生产bean。

AOP关键术语
切面（Aspect）：对横切关注点进行封装的类，一个切面是一个类。切面可以定义多个通知，用来实现具体的功能。
连接点（JoinPoint）：连接点是方法调用或者方法执行时的某个特定时刻（如方法调用、异常抛出等）。
通知（Advice）：通知就是切面在某个连接点要执行的操作。通知有五种类型，分别是前置通知（Before）、后置通知（After）、返回通知（AfterReturning）、异常通知（AfterThrowing）和环绕通知（Around）。前四种通知都是在目标方法的前后执行，而环绕通知可以控制目标方法的执行过程。
切点（Pointcut）：一个切点是一个表达式，它用来匹配哪些连接点需要被切面所增强。切点可以通过注解、正则表达式、逻辑运算等方式来定义。比如 execution(* com.xyz.service..*(..))匹配 com.xyz.service 包及其子包下的类或接口。
织入（Weaving）：织入是将切面和目标对象连接起来的过程，也就是将通知应用到切点匹配的连接点上。常见的织入时机有两种，分别是编译期织入（AspectJ）和运行期织入（AspectJ）。

AOP实现方式有哪些？
Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 Cglib 生成一个被代理对象的子类来作为代理。

IOC增强了对象的属性，AOP增强了对象的方法。

spring事务管理
spring事务按使用方式分为两种：
1.编程式事务：通过编程代码在业务逻辑中实现，控制颗粒度更小
2.声明式事务：通过注解或XML配置实现，即@Transactional
当spring遇到@Transactional注解时，会自动从数据库连接池中获取connection，并开启事务然后绑定到ThreadLocal上，对于@Transactional注解包裹的整个方法都是使用同一个从connection连接。如果这中间出现了耗时的操作就会导致占用这个connection的时间很长，一旦类似操作过多，就会导致数据库连接池耗尽。在一个事务中执行RPC操作导致数据库连接池满属于典型的长事务问题。
Spring容器的事务机制的实质是对传统JDBC的封装，也即是Spring事务管理无论是对单数据库实例还是分布式数据库实例，要实现事务管理，那么必须保证在一个事务过程获得Connection对象是同一个，那么即使在同一个函数中调用其他多个的函数，通过Spring框架的AOP动态代理机制，使得Spring容器底层能够按照传统JDBC的方式进行事务管理。从而保证对这个函数做事务控制
Spring框架具有支持多数据源的特性，在获得数据库Connection对象往往是通过DataSource中获得，DataSource这个接口往是由不同的厂商驱动实现，因此Spring框架是对DataSource进一步的封装保证每次获得的Connection为相同，这就保证了一个业务方法里面进行多次Dao操作，调用的都是一个connection对象，同时保证多个dao都是在一个事务里面

Spring事务中哪几种事务传播行为?
事务传播行为是为了解决业务层方法之间互相调用的事务问题。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。
正确的事务传播行为可能的值如下:
1.TransactionDefinition.PROPAGATION_REQUIRED使用的最多的一个事务传播行为，我们平时经常使用的@Transactional注解默认使用就是这个事务传播行为。如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。也就是说：
如果外部方法没有开启事务的话，Propagation.REQUIRED修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。如果外部方法开启事务并且被Propagation.REQUIRED的话，所有Propagation.REQUIRED修饰的内部方法和外部方法均属于同一事务，只要一个方法回滚，整个事务均回滚。
2.TransactionDefinition.PROPAGATION_REQUIRES_NEW创建一个新的事务，如果当前存在事务，则把当前事务挂起。也就是说不管外部方法是否开启事务，Propagation.REQUIRES_NEW修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。
3.TransactionDefinition.PROPAGATION_NESTED如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。
4.TransactionDefinition.PROPAGATION_MANDATORY如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。

@Transactional注解了解吗？
该注解只能应用到public方法上，否则不生效。如果这个注解使用在类上的话，表明该注解对该类中所有的public方法都生效。
默认情况下，事务只有遇到运行期异常（RuntimeException的子类）时才会回滚，Error也会导致事务回滚，但是，在遇到检查型（Checked）异常时不会回滚。加上rollbackFor=Exception.class,可以让事务在遇到非运行时异常时也回滚。

Spring AOP自调用问题
当一个方法被标记了@Transactional注解的时候，Spring事务管理器只会在被其他类方法调用的时候生效，而不会在一个类中方法调用生效。这是因为Spring AOP工作原理决定的。因为Spring AOP使用动态代理来实现事务的管理，它会在运行的时候为带有 @Transactional 注解的方法生成代理对象，并在方法调用的前后应用事物逻辑。如果该方法被其他类调用我们的代理对象就会拦截方法调用并处理事务。但是在一个类中的其他方法内部调用的时候，我们代理对象就无法拦截到这个内部调用，因此事务也就失效了。
解决办法如下：
@Service
public class MyService {

private void method1() {
     ((MyService)AopContext.currentProxy()).method2(); // 先获取该类的代理对象，然后通过代理对象调用method2。
     //......
}
@Transactional
 public void method2() {
     //......
  }
}

常见的@Transactional不生效的原因：
@Transactional应用在非public方法上
@Transactional注解属性rollbackFor设置错误
@Transactional注解属性propagation设置错误
同一个类中方法调用，导致@Transactional失效
异常被catch捕获导致@Transactional失效

SpringMVC工作原理了解吗?
1.客户端（浏览器）发送请求， DispatcherServlet拦截请求。
2.DispatcherServlet 根据请求信息调用 HandlerMapping 。HandlerMapping 根据 URL 去匹配查找能处理的 Handler（也就是我们平常说的 Controller 控制器） ，并会将请求涉及到的拦截器和 Handler 一起封装。
3.DispatcherServlet 调用 HandlerAdapter适配器执行 Handler 。
4.Handler 完成对用户请求的处理后，会返回一个 ModelAndView 对象给DispatcherServlet，ModelAndView 顾名思义，包含了数据模型以及相应的视图的信息。Model 是返回的数据对象，View 是个逻辑上的 View。
5.ViewResolver 会根据逻辑 View 查找实际的 View。
6.DispaterServlet 把返回的 Model 传给 View（视图渲染）。
7.把 View 返回给请求者（浏览器）

Spring中的设计模式

工厂模式
Spring使用工厂模式可以通过BeanFactory或ApplicationContext创建bean对象。
BeanFactory：延迟注入(使用到某个bean的时候才会注入),相比于ApplicationContext来说会占用更少的内存，程序启动速度更快。
ApplicationContext：容器启动的时候，不管你用没用到，一次性创建所有bean。BeanFactory仅提供了最基本的依赖注入支持，ApplicationContext扩展了BeanFactory,除了有BeanFactory的功能还有额外更多功能，所以一般开发人员使用ApplicationContext会更多。
ApplicationContext实现的默认行为就是在启动时将所有的单例bean提前进行实例化，提前实例化意味着作为初始化过程的一部分，ApplicationContext实例会创建并配置所有的单例bean。通常情况下这是一件好事，因为这样在配置中的任何错误就会即刻被发现，而这个实例化的过程就是在finishBeanFactoryInitialzation中完成的
ApplicationContext的三个实现类：ClassPathXmlApplication：把上下文文件当成类路径资源。FileSystemXmlApplication：从文件系统中的XML文件载入上下文定义信息。XmlWebApplicationContext：从Web系统中的XML文件载入上下文定义信息。

单例模式
Spring中bean的默认作用域就是singleton(单例)的，这里并不表示被代理的bean的类只能创建一个对象，只是说spring中的代理bean对象是只有一个。 Spring通过ConcurrentHashMap实现单例注册表的特殊方式实现单例模式。

代理模式
Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 JDK Proxy 去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 Cglib 生成一个被代理对象的子类来作为代理。如果你希望强制使用CGLIB代理，例如希望代理目标对象的所有方法，而不只是实现自接口的方法，可将该属性设置为true，CGLIB代理有两个问题，一是无法增强final方法，二是需要额外引用相关jar包

模板方法模式
Spring中JdbcTemplate、HibernateTemplate 等以Template结尾的对数据库操作的类，它们就使用到了模板模式。一般情况下，我们都是使用继承的方式来实现模板模式，但是 Spring并没有使用这种方式，而是使用Callback模式与模板方法模式配合，既达到了代码复用的效果，同时增加了灵活性。

适配器模式
在 Spring MVC 中，DispatcherServlet根据请求信息调用HandlerMapping，解析请求对应的Handler。解析到对应的Handler（也就是我们平常说的Controller控制器）后，开始由HandlerAdapter适配器处理。HandlerAdapter作为期望接口，具体的适配器实现类用于对目标类进行适配，Controller作为需要适配的类。

SpringBoot自动装配
springboot的自动装配就是比如当我们在用redisTemplate这个对象的时候，我们明明没有手动的把这个bean注册到spring容器中，但是我们却可以从spring容器中拿到这个bean，因为在我们引入了redis-starter依赖的时候，springBoot帮我们实现了自动装配。
自动装配的实现其实就是一种约定大于配置的思想，在springboot的启动类上有@SpringBootApplication注解，它是由三个注解组成，其中的@EnableAutoConfiguration就是开启自动装配的注解，而@EnableAutoConfiguration里又有@Import注解，实现ImportSelector接口+@import注解是spring注册bean的一种方式，所以springboot只要知道我们要装配的类名就可以了，springboot采用SPI的机制，通过一种约定来实现自动装配，也就是把你想要装配的类以k=v的形式放到META—INF/spring.factores文件中。

在Spring程序main方法中添加@SpringBootApplication或者@EnableAutoConfiguration，spring会自动去maven中读取每个starter中的spring.factories文件，该文件里配置了所有需要被创建spring容器中的bean。SpringBoot在启动时扫描项目所依赖的JAR包，寻找包含spring.factories文件的JAR，根据spring.factories配置加载AutoConfigure类根据@Conditional注解的条件，进行自动配置并将Bean注入Spring Context。

我们现在提到自动装配的时候，一般会和 Spring Boot 联系在一起。但是，实际上 Spring Framework 早就实现了这个功能。Spring Boot 只是在其基础上，通过 SPI 的方式，做了进一步优化。SpringBoot 定义了一套接口规范，这套规范规定：SpringBoot 在启动时会扫描外部引用 jar 包中的META-INF/spring.factories文件，将文件中配置的类型信息加载到 Spring 容器（此处涉及到 JVM 类加载机制与 Spring 的容器知识），并执行类中定义的各种操作。对于外部 jar 来说，只需要按照 SpringBoot 定义的标准，就能将自己的功能装置进 SpringBoot。没有 Spring Boot 的情况下，如果我们需要引入第三方依赖，需要手动配置，非常麻烦。但是，Spring Boot 中，我们直接引入一个 starter 即可。

SpringBoot的启动流程
1. 从spring.factories配置文件中加载EventPublishingRunListener对象，该对象拥有SimpleApplicationEventMulticaster属性，即在SpringBoot启动过程的不同阶段用来发射内置的生命周期事件;
2. 准备环境变量，包括系统变量，环境变量，命令行参数，默认变量，servlet相关配置变量，随机值以及配置文件（比如application.properties）等;
3. 控制台打印SpringBoot的bannner标志；
4. 根据不同类型环境创建不同类型的applicationcontext容器，因为这里是servlet环境，所以创建的是AnnotationConfigServletWebServerApplicationContext容器对象；
5. 从spring.factories配置文件中加载FailureAnalyzers对象,用来报告SpringBoot启动过程中的异常；
6. 为刚创建的容器对象做一些初始化工作，准备一些容器属性值等，对ApplicationContext应用一些相关的后置处理和调用各个ApplicationContextInitializer的初始化方法来执行一些初始化逻辑等；
7. 刷新容器，这一步至关重要。比如调用bean factory的后置处理器，注册BeanPostProcessor后置处理器，初始化事件广播器且广播事件，初始化剩下的单例bean和SpringBoot创建内嵌的Tomcat服务器等等重要且复杂的逻辑都在这里实现，主要步骤可见代码的注释，关于这里的逻辑会在以后的spring源码分析专题详细分析；
8. 执行刷新容器后的后置处理逻辑，注意这里为空方法；
9. 调用ApplicationRunner和CommandLineRunner的run方法，我们实现这两个接口可以在spring容器启动后需要的一些东西比如加载一些业务数据等;
10. 报告启动异常，即若启动过程中抛出异常，此时用FailureAnalyzers来报告异常;
11. 最终返回容器对象，这里调用方法没有声明对象来接收。
