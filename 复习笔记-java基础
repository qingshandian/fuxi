复习笔记-java基础

java语言
	java简介
		Java介于编译型语言和解释型语言之间。编译型语言如C、C++，代码是直接编译成机器码执行，但是不同的平台（x86、ARM等）CPU的指令集不同，因此，需要编译出每一种平台的对应机器码。解释型语言如Python、Ruby没有这个问题，可以由解释器直接加载源码然后运行，代价是运行效率太低。而Java是将代码编译成一种“字节码”，它类似于抽象的CPU指令，然后，针对不同平台编写虚拟机，不同平台的虚拟机负责加载字节码并执行，这样就实现了“一次编写，到处运行”的效果。当然，这是针对Java开发者而言。对于虚拟机，需要为每个平台分别开发。为了保证不同平台、不同公司开发的虚拟机都能正确执行Java字节码，SUN公司制定了一系列的Java虚拟机规范。从实践的角度看，JVM的兼容性做得非常好，低版本的Java字节码完全可以正常运行在高版本的JVM上。

	jdk/jre
	  ┌─    ┌──────────────────────────────────┐
	  │     │     Compiler, debugger, etc.     │
	  │     └──────────────────────────────────┘
	 JDK ┌─ ┌──────────────────────────────────┐
	  │  │  │                                  │
	  │ JRE │      JVM + Runtime Library       │
	  │  │  │                                  │
	  └─ └─ └──────────────────────────────────┘
	        ┌───────┐┌───────┐┌───────┐┌───────┐
	        │Windows││ Linux ││ macOS ││others │
	        └───────┘└───────┘└───────┘└───────┘

	classpath
		classpath的设定方法有两种：
		在系统环境变量中设置classpath环境变量，不推荐；
		在启动JVM时设置classpath变量，推荐。
		我们强烈不推荐在系统环境变量中设置classpath，那样会污染整个系统环境。在启动JVM时设置classpath才是推荐的做法。实际上就是给java命令传入-classpath或-cp参数：java -classpath .;C:\work\project1\bin;C:\shared abc.xyz.Hello，没有设置系统环境变量，也没有传入-cp参数，那么JVM默认的classpath为.，即当前目录
		通常，我们在自己编写的class中，会引用Java核心库的class，例如，String、ArrayList等。这些class应该上哪去找？
		有很多“如何设置classpath”的文章会告诉你把JVM自带的rt.jar放入classpath，但事实上，根本不需要告诉JVM如何去Java核心库查找class，JVM怎么可能笨到连自己的核心库在哪都不知道？不要把任何Java核心库添加到classpath中！JVM根本不依赖classpath加载核心库！更好的做法是，不要设置classpath！默认的当前目录.对于绝大多数情况都够用了。

	jar包		
		如果有很多.class文件，散落在各层目录中，肯定不便于管理。如果能把目录打一个包，变成一个文件，就方便多了。jar包就是用来干这个事的，它可以把package组织的目录层级，以及各个目录下的所有文件（包括.class文件和其他文件）都打成一个jar文件，这样一来，无论是备份，还是发给客户，就简单多了。jar包实际上就是一个zip格式的压缩文件，而jar包相当于目录。jar包还可以包含一个特殊的/META-INF/MANIFEST.MF文件，MANIFEST.MF是纯文本，可以指定Main-Class和其它信息。JVM会自动读取这个MANIFEST.MF文件，如果存在Main-Class，我们就不必在命令行指定启动的类名，而是用更方便的命令：java -jar hello.jar。在大型项目中，不可能手动编写MANIFEST.MF文件，再手动创建zip包。Java社区提供了大量的开源构建工具，例如Maven，可以非常方便地创建jar包。

	class版本
		我们通常说的Java 8，Java 11，Java 17，是指JDK的版本，也就是JVM的版本，更确切地说，就是java.exe这个程序的版本：
		$ java -version
		java version "17" 2021-09-14 LTS
		而每个版本的JVM，它能执行的class文件版本也不同。例如，Java 11对应的class文件版本是55，而Java 17对应的class文件版本是61。
		如果用Java 11编译一个Java程序，输出的class文件版本默认就是55，这个class既可以在Java 11上运行，也可以在Java 17上运行，因为Java 17支持的class文件版本是61，表示“最多支持到版本61”。
		如果用Java 17编译一个Java程序，输出的class文件版本默认就是61，它可以在Java 17、Java 18上运行，但不可能在Java 11上运行，因为Java 11支持的class版本最多到55。如果使用低于Java 17的JVM运行，会得到一个UnsupportedClassVersionError


面向对象
	思考：首先站在cpu的角度，cpu并不感知编程语言是面向对象还是面向过程，最终都是编译成cpu指令来执行，所以面向对象的这些特性显然不是为了让cpu执行更快，只是为了让写代码的人更方便使用和理解。
	封装
		封装的本质是便于管理方法和数据块，把某些方法和数据块封装在一个对象中，对象的本质只是个引用，通过加入对象这个中间层，对方法的调用和数据块的查询修改可以更加地方便快捷，但是也带来新的问题，在OOP语言中任何一个方法和数据块都必须封装在一个对象内，通过对象来使用，这样实际上也带来了性能上的损耗和不可避免的方法或数据块的冗余
	继承
		封装带来的问题就是增加了方法和数据块的冗余，引入继承可以通过对象的复用可以减少这种冗余，所以可以认为继承解决了封装带来的问题，但继承不仅仅是为了解决冗余问题。
	多态
		多态可以简单的分为编译时多态和运行时多态
		编译时多态就是指方法重载
		运行时多态指的是方法重写，而方法重写又是继承的特性，所以多态一定程度上是为了解决继承带来的问题，运行时多态的实现靠的就是动态绑定。

		静态绑定和动态绑定
		在Java中对属性采用静态绑定，对方法采用静态或动态绑定。
		方法绑定：把一个方法与其所在的类/对象关联起来叫做方法的绑定，绑定分为静态绑定（前期绑定）和动态绑定（后期绑定）。
		程序在JVM运行过程中，会把类的类型信息、static属性和方法、final常量等元数据加载到方法区，这些在类被加载时就已经知道，不需对象的创建就能访问的，就是静态绑定的内容；需要等对象创建出来，使用时根据堆中的实例对象的类型才进行取用的就是动态绑定的内容。

		静态绑定
		静态绑定（前期绑定）是指：在程序运行前就已经知道方法是属于那个类的，在编译的时候就可以连接到类的中，定位到这个方法。在Java中，final、private、static修饰的方法以及构造函数都是静态绑定的，不需程序运行，不需具体的实例对象就可以知道这个方法的具体内容。

		动态绑定
    	动态绑定（后期绑定）是指：在程序运行过程中，根据具体的实例对象才能具体确定是哪个方法。
		动态绑定是多态性得以实现的重要因素，它通过方法表来实现：每个类被加载到虚拟机时，在方法区保存元数据，其中，包括一个叫做 方法表（method table）的东西，表中记录了这个类定义的方法的指针，每个表项指向一个具体的方法代码。如果这个类重写了父类中的某个方法，则对应表项指向新的代码实现处。从父类继承来的方法位于子类定义的方法的前面。在运行时，虚拟机根据具体对象的类型进行绑定，或者说是只有对象在虚拟机中创建了之后，才能确定方法属于哪一个对象。

		在java中，几乎所有的方法都是后期绑定，在运行时动态绑定方法属于子类还是基类。但也有特殊，针对static方法和final方法由于不能被继承，因此在编译时就可以确定他们的值，他们是属于前期绑定。特别说明的一点，private声明的方法和成员变量不能被子类继承，所有的private方法都被隐式的指定为final的(由此我们知道：将方法声明为final类型的  一是为了防止方法被覆盖，二是为了有效的关闭java中的动态绑定)。java中的后期绑定是由JVM来实现的，我们不用去显式的声明它，而C++则不同,必须明确的声明某个方法具备后期绑定。java当中的向上转型或者说多态是借助于动态绑定实现的，所以理解动态绑定，也就搞定向上转型和多态。

		静态绑定和动态绑定的本质
		动态绑定的方法在java字节码中是使用invokevirtual指令进行调用，而静态绑定的方法是使用invokestatic和invokespecial指令调用

对象
	创建对象的方式
	1.使用new关键字创建对象
	ClassName object = new ClassName();
	2.使用Class的newInstance()方法创建对象，需要注意的是，该方法要求类必须具有一个无参的构造方法。
	ClassName object = ClassName.class.newInstance();
	3.使用反射中的Constructor的newInstance()方法创建对象	
	Class<?> clazz = Class.forName("ClassName");
	ClassName object = (ClassName) clazz.getDeclaredConstructor().newInstance();
	4.使用clone()方法创建对象：如果一个类实现了Cloneable接口，就可以使用clone()方法创建一个对象的副本
	ClassName object = (ClassName) originalObject.clone();
	5.反序列化一个对象，前提是类实现了Serializable接口
	try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_NAME))) { ObjectName obj = ois.readObject(); }

String
	字符串常量池
		静态常量池（Class常量池）	
		Java 文件被编译成 Class 文件，Class 文件中除了包含类的版本、字段、方法、接口等描述信息外，还有一项就是 Class 常量池，Class 常量池是当 Class 文件被 Java 虚拟机加载进来后存放各种字面量 (Literal)和符号引用 。

		运行时常量池
		运行时常量池是方法区的一部分。运行时常量池是当Class文件被加载到内存后，Java虚拟机会将Class文件常量池里的内容转移到运行时常量池里，即编译期间生成的字面量、符号引用(运行时常量池也是每个类都有一个)。一般来说，除了保存Class文件中描述的符号引用外，还会把翻译出来的直接引用也存储到运行时常量池中。运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中。

		运行时常量池在 JDK1.6、JDK1.7 和 JDK 8 的变化
		1）在 JDK1.7之前运行时常量池存放在方法区，逻辑包含字符串常量池，存放字面量和符号引用，此时 hotspot 虚拟机对方法区的实现为永久代。
		2）在 JDK1.7中字符串常量池被从方法区拿到了堆中，这里没有提到运行时常量池，也就是说字符串常量池被单独拿到堆，运行时常量池剩下的东西还在方法区，也就是hotspot中的永久代。
		3）在 JDK1.8 中，hotspot 移除了永久代用元空间(Metaspace)取而代之，这时候字符串常量池还在堆，运行时常量池还在方法区，只不过方法区的实现从永久代变成了元空间(Metaspace) 。

		字符串常量池
		字符串常量池是所有类公用的一块空间，在一个虚拟机中只有一块常量池区域。
		字符串常量池又称为字符串池，全局字符串池，英文也叫String Pool。JVM为了提升性能和减少内存开销，避免字符串的重复创建，其维护了一块特殊的内存空间，这就是字符串常量池。字符串常量池由String类私有的维护。全局字符串池里的内容是在类加载完成，经过验证，准备阶段之后在堆中生成字符串对象实例，然后将该字符串对象实例的字符串值存到string pool中。要注意的是，如果放进StringPool的String非常多，就会造成Hash冲突严重，从而导致链表会很长，而链表长了后直接会造成的影响就是当调用str.intern时性能会大幅下降

		字符串常量池的优缺点
		字符串常量池的优点就是避免了相同内容的字符串的创建，节省了内存，省去了创建相同字符串的时间，同时提升了性能；另一方面，字符串池的缺点就是牺牲了JVM在常量池中遍历对象所需要的时间，不过其时间成本相比而言比较低。

		字符串常量池存放的内容
		在JDK6及之前版本中，String Pool里放的都是字符串常量；在JDK7.0中，由于String.intern()发生了改变，因此String Pool中也可以存放放于堆内的字符串对象的引用。
		常量池可能保存了 字符串字面对象，也可能保存了指向 堆中字符串对象 的引用，主要看第一次放入的是哪个

		基本数据类型的常量池
		基本类型的包装类的大部分都实现了常量池技术，即Byte,Short,Integer,Long,Character,Boolean；数值[-128，127]的相应类型的缓存数据，但是超出此范围仍然会去创建新的对象，比如Integer内部的IntegerCache。
		两种浮点数类型的包装类 Float,Double 并没有实现常量池技术。

	str.intern()方法
		直接使用双引号声明出来的String对象会直接存储在字符串常量池中，如果不是用双引号声明的String对象，可以使用String提供的intern方法储存至字符串常量池中。
		由于字符串常量池是虚拟机层面的技术，所以在String的类定义中并没有类似IntegerCache这样的对象池，String类中提及缓存池的概念只有intern()这个方法。
		intern()是一个native的方法，那么说明它本身并不是由Java语言实现的，而是通过jni(Java Native Interface)调用了其他语言(如C/C++)实现的一些外部方法。
		大体实现：Java调用c++实现的StringTable的intern()方法。StringTable的intern()方法跟Java中的HashMap的实现是差不多的，只是不能自动扩容，默认大小是1009。

		str.intern有点类似于hashmap的put方法，它有两个作用，一个是当调用str.intern()时先判断str这个字符串在字符串常量池中是否已经存在，如果已经存在则直接返回在字符串常量池中的对象引用，如果不存在则先将自己的深拷贝或浅拷贝到字符串常量池中，再返回在字符串常量池中的对象引用，如果是浅拷贝的话其实返回的就是自身的引用

		关于str.intern()方法还有一个问题需要讲一下，在不同jdk版本所执行的具体逻辑是不同的。在jdk6以前，方法区是存放在永生代内存区域中，与堆区是分割开的，那么当往常量池中创建对象时，就需要进行深拷贝，也就是把一个对象完整地复制一遍并创建新的对象。jdk7以后常量池的实现使得在常量池中创建对象可以进行浅拷贝，也就是不需要把整个对象复制过去，而只需要复制对象的引用即可，避免重复创建对象。

	字符串基础
		String s = new String("abc"); 这句代码创建了两个对象（如果字符串常量池之前没有abc这个字符串的话），首先在字符串常量池中创建了一个对象"abc"，然后把该对象传递给String的构造器在堆中又创建了一个对象s，注意这两个对象内部的字符数组是同一个。

		"+"运算符重载
		使用"+"连接字符串时，JVM会隐式创建StringBuilder对象，这种方式在大部分情况下并不会造成效率的损失，不过在进行大量循环拼接字符串时则需要注意。在循环体中使用"+"拼接，由于大量StringBuilder创建在堆内存中，肯定会造成效率的损失，所以在这种情况下建议在循环体外创建一个StringBuilder对象调用append()方法手动拼接。
		与此之外还有一种特殊情况，也就是当"+"两端均为编译期确定的字符串常量时，编译器会进行相应的优化，直接将两个字符串常量拼接好
		System.out.println("Hello" + "World"); 反编译后->System.out.println("HelloWorld");

		不可变性
		因为字符串是不可变的，所以在它创建的时候hashcode就被缓存了，不需要重新计算。这就使得字符串很适合作为Map中的键，字符串的处理速度要快过其它的键对象。这就是HashMap中的键往往都使用字符串的原因。不可变对象虽然优点很多，但是缺点就是每一个不同的值都需要不同的对象来存储，所以不可变对象比较适合缓存起来使用

		public static void main(String[] args) {
		    String s1 = "AB";
		    String s2 = new String("AB");
		    String s3 = "A";
		    String s4 = "B";
		    String s5 = "A" + "B";
		    String s6 = s3 + s4;
		    System.out.println(s1 == s2);
		    System.out.println(s1 == s5);
		    System.out.println(s1 == s6);
		    System.out.println(s1 == s6.intern());
		    System.out.println(s2 == s2.intern());
		}

	内码/代码单元（code unit）
		java内码编码格式是UTF-16，基本字符用两个字节存储，辅助字符用4个字节存储，比如emoji字符，两个字节为一个代码单元
		内码和外码
		我们在前端向服务器发送一个请求的时候如果请求数据中是24个英文字母，这个时候我们在请求头中的content-length中可以看到这24个英文字母占用的字节数是24个字节，就是说这个时候是使用utf-8编码进行存储的，此时相对于java来说外码就是utf-8，当这个字符串传输到Java中保存到一个String变量中的时候，这个字符串的长度就变成了48个字节，因为存储到内存中就是使用的内码，也就是utf-16。一般在io操作的时候会出现内码和外码的转换，比如需要把内存中的字符串通过字节流发送出去会使用str.getBytes(UTF_8)，这个方法就是将String的内码转换为外码。究其原因，是因为java的设计者认为快速定位字符在字符串中的偏移量比节省内存更有意义，但在新版java9中，字符串也会根据其内容来自动切换编码格式从而节省内存。
		java中char不等于字符
		java中char类型目前已经偏离了其原有的语意，也就是一个char类型表示的并不完全是我们理解上的任意一个字符，这是由于java中char类型所使用的utf-16编码的历史原因造成的。
		char脱离了原有字符的语意，理解为code unit更加合适。一个char等于一个code unit，而不等于一个字符，当表示BMP字符，utf-16使用一个code unit，此种情况Java中的char才具有字符的语意。String本意为char类型的序列，如今理解为code unit的序列也许更合适。
		String.length()返回的是code unit的个数，而不是字符的个数，也不是占用字节的个数！统计String中的字符(code point)数，请使用String.codePointCount()方法!
		在java9中，出于空间优化的目的，String的内部实现已经由char[]调整为byte[]，对String中字符的编码也多了ISO-8859-1/Latin-1的可能，而不仅仅为utf-16。
		JDK9之后，value类型从char[]变成byte[]，增加了一个字段code，如果字符全部是ASCII字符，value使用LATIN编码，如果存在任何一个非ASCII字符，则用UTF16编码，这种混合编码的方式，使得英文场景占更少的内存。缺点是导致Java9的String API性能可能不如JDK8。

		在Java中，一般情况下，一个char对象可以存储一个字符，一个char的大小是16位两个字节。但随着计算机的发展，字符集也在不断地发展，16位的存储大小已经不够用了，因此拓展了使用两个char，也就是32位来存储一些特殊的字符，如emoij。一个16位称为一个 代码单元 ，一个字符称为 代码点 ，一个代码点可能占用一个代码单元，也可能是两个。

Object
	getClass()
		getClass()方法可以用于获取对象运行时的字节码类型，得到该对象的运行时的真实类型。该方法属于Java的反射机制，其返回值是Class类型，例如 Class c = obj.getClass();。通过对象c，我们可以进一步获取该对象的所有成员方法，每个成员方法都是一个Method对象。我们也可以获取该对象的所有成员变量，每个成员变量都是一个Field对象。同样的，我们也可以获取该对象的构造函数，构造函数则是一个Constructor对象。

	hashCode()
		hashCode()是Object中的一个native方法，也是所有类都拥有的一个方法，主要是返回每个对象十进制的hash值。hash值是由hash算法根据对象的地址、对象中的字符串、数字等计算出来的。一般情况下，相同的对象应会返回相同的哈希值，不同的对象会返回不同的哈希值。
		哈希值是根据地址值换算出来的一个值，并不是实际的地址值，常用于哈希表中，如HashMap、HashTable、HashSet。关于Object的哈希值，不同的JDK算法其实是不一样的：
		Java 6、7 中会默认返回一个随机数；
		Java 8 中默认通过和当前线程有关的一个随机数 + 三个确定值，运用Marsaglia’s xorshift scheme的随机数算法得到的一个随机数。
		因此，hashCode值不仅和对象内存地址有关，还与对象的所有属性值都有关系，因此一个类如果不覆写Object的hashCode方法，当它的对象的任一属性值变化时，其hashCode值也会变化，如果把其作为HashSet的元素或者HashMap的Key，当hashCode值变化之后在这个集合中就找不到该对象了。比如String的hashCode方法是根据字符串中的每个字符*31再相加得到的，在它创建的时候hashcode就被缓存了，不需要重新计算，这就使得字符串很适合作为Map中的键。

	equals(Object)
		重写equals方法步骤：1.判断引用是否相等if(o==this) 2.类型检查 if(!(o instanceof PhoneNumber)) 3.类型转换PhoneNumber pn = (PhoneNumber)o 4.字段比较
		注意在第二步中使用getClass比较和使用instanceof比较的区别，getClass比较要求两个类完全相同，而instanceof对于子类instanceof父类也是为true的
	
	toString()
		Object类的toString()方法会返回“运行时的类名@十六进制哈希码”格式的字符串
		不要使用JSON.toString(obj)的方式来打日志，一方面对象可能包含比较大的属性，打印时浪费空间，另一方面对象序列化时可能会报错，而一般日志语句不会try catch，所以这个异常可能会对程序产生较大的影响，建议重写toString方法

	clone()
		clone方法是protected和native的，被调用clone方法的类必须实现Cloneable接口，该接口只是一个标识接口，没有任何方法需要实现
		深拷贝和浅拷贝
		Object默认实现，在浅克隆中，如果源对象的成员变量是值类型，则复制一份给克隆对象；如果源对象的成员变量是引用类型，则将引用对象的地址复制一份给克隆对象，也就是说源对象和克隆对象的成员变量指向相同的内存地址。
		在深克隆中，无论源对象的成员变量是值类型还是引用类型，都将复制一份给克隆对象，即深克隆将源对象的所有引用对象也复制一份给克隆对象。
		在Java语言中，如果需要实现深克隆，可以通过实现Cloneable接口，自定义覆盖Object类的clone()方法实现，也可以通过序列化(Serialization)等方式来实现。如果引用类型里面还包含很多引用类型，或者内层引用类型的类里面又包含引用类型，使用clone方法就会很麻烦。这时我们可以用序列化的方式来实现对象的深克隆。

	wait()、wait(long)、wait(long,int)、notify()、notifyAll()方法
		参照多线程章节

泛型和Type接口
	java.lang.reflect.Type是Java中所有类型的公共高级接口, 代表了Java中的所有类型. Type体系中类型的包括：数组类型(GenericArrayType)、参数化类型(ParameterizedType)、类型变量(TypeVariable)、通配符类型(WildcardType)、基本类型(Class), 以上这些类型都实现Type接口。
	Type接口主要是为了兼容泛型类而增加的接口，将普通类和泛型类统一起来，Type接口有一个实现类Class，4个子接口，Class表示的是普通类，内部没有泛型相关的方法和实例变量，而它的4个子接口和实现类都是为了泛型使用，通过这4个子接口和实现类可以获得所有泛型相关的信息，最重要的Type实现类ParameterizedType，通过其中方法getActualTypeArguments()就可以获取到声明的泛型类型了
	比如：
	GenericType<String> genericType = new GenericType<String>() {};//注意，这里是一个匿名内部类，也就是说生成了一个GenericType的子类
    Type superclass = genericType.getClass().getGenericSuperclass();
    //getActualTypeArguments 返回确切的泛型参数, 如Map<String, Integer>返回[String, Integer]
    Type type = ((ParameterizedType) superclass).getActualTypeArguments()[0]; 
    System.out.println(type);//class java.lang.String
    上述代码类似于fastjson的parseObject方法内部的实现，这里为什么可以通过GenericType的子类对象拿到GenericType类的泛型信息可以参考ata文章，除了这种方式在java反射中调用GenericXXX开头的方法也可以获取到类上，实例变量上，方法入参出参上泛型的类型，比如method.getGenericParameterTypes()，method.getGenericReturnType()等。fastjson有一个autoType版本可以实现任意泛型对象的序列化和反序列化，但是这个版本存在漏洞已经被禁止使用，所以使用fastjson的parseObject反序列化泛型对象时，需要像上述代码一样处理下。
    所以可以认为获取泛型类型有两种不同的场景，一个是获取类上，实例变量上，方法入参返回值上已经声明了具体的泛型类型，这个时候使用反射中GenericXXX开头的方法即可。
    另一种场景就是获取到某个具体对象上的泛型类型，这个必须要使用上述构建匿名子类的方式来获取，这两种可以获取到泛型类型的原理参考https://www.iteye.com/blog/rednaxelafx-586212和ata文章。其原理是泛型类型信息虽然没有被存储到Class对象中，但是被写入到了.class文件内部的注释里面，这两种方式可以获取到.class文件注释里的内容。

    参数化类型(ParameterizedType)
    参数化类型代表通常的泛型类型，比如List<String>，Map<String, Integer>，内部包含三个方法，ParameterizedType的实现类ParameterizedTypeImpl内部存储的数据很简单，只是和泛型相关的类型数据，如果是多级泛型需要嵌套存储
    Type getRawType() 获取当前参数化类型的类型，比如Map<String, Integer>返回的是Map.class
    Type getOwnerType() 获取当前参数化类型所在类的类型，比如Map.Entry<String, String>，返回的是Map.class
    Type[] getActualTypeArguments() 获取当前参数化类型的实际类型数组，比如Map<String, Integer>，返回的是String.class和Integer.class，需要注意的是，它只返回最外层<>的类型，里面嵌套的不返回

	Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。引入泛型的意义在于：适用于多种数据类型执行相同的代码（代码复用）

	类型擦除
	虽然Java引入了泛型这个概念，但为了保持向前兼容（JVM层面的兼容，不需要改动Bytecode和JVM设计），和编译性能（相比C++的Template会以模板参数生成新的类型），Java引入了类型擦除作为泛型的实现方案，通过类型擦除，Java不需要在虚拟机实现上做任何修改，同时也不会为ParameterizedType创建新的类。

	当类定义中的类型参数没有任何限制时，在类型擦除中直接被替换为Object，即形如<T>和<?>的类型参数都被替换为Object。
	当类定义中的类型参数存在限制（上下界）时，在类型擦除中替换为类型参数的上界或者下界，比如形如<T extends Number>和<? extends Number>的类型参数被替换为Number，<? super Number>被替换为Object。
	自动产生“桥接方法”以保证擦除类型后的代码仍然具有泛型的“多态性”。

	如何理解泛型的编译期检查？
	Java编译器是通过先检查代码中泛型的类型，然后在进行类型擦除，再进行编译。就是因为擦除的存在，所以泛型无法在运行期检查类型是否正确，只能在编译期检查，而数组则可以在运行期检查类型是否正确。
	数组是协变的，而泛型是不可变的
	如果Sub是Super的子类型，那么数据Sub[]就是Super[]的子类型
	对于任意两个类型Type1，Type2，List<Type1>既不是List<Type2>的子类也不是他的父类，所以泛型需要通配符匹配

	如何理解泛型的多态？泛型的桥接方法
	类型擦除会造成多态的冲突，而JVM解决方法就是桥接方法。对于泛型的子类如果使用反射根据方法名获取Method时，需要注意判断isBridge是否为桥接方法，桥接方法是JVM为了解决泛型子类多态冲突而自动生成的方法

	注意：
	1.泛型数组不能初始化，因为数组在new时不能确定A的类型，就无法在内存开空间，错误写法: A[] a=new A[];
	2.静态方法不能使用类定义的泛型，原因是静态成员是和类相关的，在类加载时，对象还没有创建所以如果静态方法和静态属性使用了泛型，JVM就无法完成初始化。

	通配符
	泛型和通配符不是一回事，泛型是在定义时不确定具体类型，但是使用时是确定好具体类型的，而通配符不但定义时不确定具体类型，在实际使用时也不确定具体类型，可能是任意一种类型<?>，或者是某种类型的子类型<? extend Test>

反射
	Class
		如果我们查看JDK源码，可以发现Class类的构造方法是private，只有JVM能创建Class实例，我们自己的Java程序是无法创建Class实例的。
		由于JVM为每个加载的class创建了对应的Class实例，并在实例中保存了该class的所有信息，包括类名、包名、父类、实现的接口、所有方法、字段等，因此，如果获取了某个Class实例，我们就可以通过这个Class实例获取到该实例对应的class的所有信息。这种通过Class实例获取class信息的方法称为反射（Reflection）。
		如何获取一个Class的对象？
		//第一种
	    Class c1 = String.class;
	    //第二种
	    String s = "hello,world";
	    Class c2 = s.getClass();
	    //第三种,以上面的Book类为例,其实就是动态加载类，注意捕获异常，因为类有可能不存在 
	    try {
	        Class c3 = Class.forName("com.test.Book");
	    } catch (ClassNotFoundException e) {
	        e.printStackTrace();
	    }
	    这三种方式获取的Class实例都是同一个实例，因为JVM对每个加载的Class只创建一个Class实例来表示它的类型。
	    常用方法：newInstance getFields getDeclaredFields getMethods getDeclaredMethods getConstructors getDeclaredConstructors
	    比如在泛型方法中，由于不知道泛型参数T的具体类型，没办法使用new创建对象，可以拿到泛型对象的Class对象调用newInstance方法来创建其对象
	    因为Class实例在JVM中是唯一的，所以，上述方法获取的Class实例是同一个实例，可以用==比较两个Class实例。
	    用instanceof不但匹配指定类型，还匹配指定类型的子类。而用==判断class实例可以精确地判断数据类型，但不能作子类型比较。
	    如果是两个Class实例，要判断一个向上转型是否成立，可以调用isAssignableFrom()：Number.class.isAssignableFrom(Integer.class);//true
	    注意到数组（例如String[]）也是一种类，而且不同于String.class，它的类名是[Ljava.lang.String;。此外，JVM为每一种基本类型如int也创建了Class实例，通过int.class访问。
	    通过Class.newInstance()可以创建类实例，它的局限是：只能调用public的无参数构造方法。带参数的构造方法，或者非public的构造方法都无法通过Class.newInstance()被调用。

	Class动态加载
		JVM在执行Java程序的时候，并不是一次性把所有用到的class全部加载到内存，而是第一次需要用到class时才加载。例如：
		public class Main {
		    public static void main(String[] args) {
		        if (args.length > 0) {
		            create(args[0]);
		        }
		    }
		    static void create(String name) {
		        Person p = new Person(name);
		    }
		}
		当执行Main.java时，由于用到了Main，因此，JVM首先会把Main.class加载到内存。然而，并不会加载Person.class，除非程序执行到create()方法，JVM发现需要加载Person类时，才会首次加载Person.class。如果没有执行create()方法，那么Person.class根本就不会被加载。
		这就是JVM动态加载class的特性。动态加载class的特性对于Java程序非常重要。利用JVM动态加载class的特性，我们才能在运行期根据条件加载不同的实现类。
		例如，Commons Logging总是优先使用Log4j，只有当Log4j不存在时，才使用JDK的logging。利用JVM动态加载特性，大致的实现代码如下：
		// Commons Logging优先使用Log4j:
		LogFactory factory = null;
		if (isClassPresent("org.apache.logging.log4j.Logger")) {
		    factory = createLog4j();
		} else {
		    factory = createJdkLog();
		}

		boolean isClassPresent(String name) {
		    try {
		        Class.forName(name);
		        return true;
		    } catch (Exception e) {
		        return false;
		    }
		}
		这就是为什么我们只需要把Log4j的jar包放到classpath中，Commons Logging就会自动使用Log4j的原因。
		注意编译和运行是两个概念，很多程序编译要用到一个class A，运行不一定需要，删了都能跑，就是因为动态加载特性，相关代码没执行，有没有那个class都无所谓。

	Field
		如果使用反射可以获取private字段的值，那么类的封装还有什么意义？
		答案是正常情况下，我们总是通过p.name来访问Person的name字段，编译器会根据public、protected和private决定是否允许访问字段，这样就达到了数据封装的目的。
		而反射是一种非常规的用法，使用反射，首先代码非常繁琐，其次，它更多地是给工具或者底层框架来使用，目的是在不知道目标实例任何信息的情况下，获取特定字段的值。
		此外，setAccessible(true)可能会失败。如果JVM运行期存在SecurityManager，那么它会根据规则进行检查，有可能阻止setAccessible(true)。例如，某个SecurityManager可能不允许对java和javax开头的package的类调用setAccessible(true)，这样可以保证JVM核心库的安全。
		反射既可以破坏封装里的访问限制，也可以绕过泛型的类型检查。

	Method
		如果获取到的Method表示一个静态方法，调用静态方法时，由于无需指定实例对象，所以invoke方法传入的第一个参数永远为null。
		获取Method就要比获取Field多了class入参，因为方法存在重载

	Constructor
		调用Class.newInstance()的局限是，它只能调用该类的public无参数构造方法。如果构造方法带有参数，或者不是public，就无法直接通过Class.newInstance()来调用。
		为了调用任意的构造方法，Java的反射API提供了Constructor对象，它包含一个构造方法的所有信息，可以创建一个实例。

	jdk动态代理
		有没有可能不编写实现类，直接在运行期创建某个interface的实例呢？这是可能的，因为Java标准库提供了一种动态代理（Dynamic Proxy）的机制：可以在运行期动态创建某个interface的实例。
		一个最简单的动态代理实现如下：
		public class Main {
		    public static void main(String[] args) {
		        InvocationHandler handler = new InvocationHandler() {
		            @Override
		            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		                System.out.println(method);
		                if (method.getName().equals("morning")) {
		                    System.out.println("Good morning, " + args[0]);
		                }
		                return null;
		            }
		        };
		        Hello hello = (Hello) Proxy.newProxyInstance(
		            Hello.class.getClassLoader(), // 传入ClassLoader
		            new Class[] { Hello.class }, // 传入要实现的接口
		            handler); // 传入处理调用方法的InvocationHandler
		        hello.morning("Bob");
		    }
		}

		interface Hello {
		    void morning(String name);
		}
		在运行期动态创建一个interface实例的方法如下：
		1.定义一个InvocationHandler实例，它负责实现接口的方法调用；
		2.通过Proxy.newProxyInstance()创建interface实例，它需要3个参数：
			使用的ClassLoader，通常就是接口类的ClassLoader；
			需要实现的接口数组，至少需要传入一个接口进去；
			用来处理接口方法调用的InvocationHandler实例。
		3.将返回的Object强制转型为接口。
		动态代理实际上是JVM在运行期动态创建class字节码并加载的过程，它并没有什么黑魔法，把上面的动态代理改写为静态实现类大概长这样：
		public class HelloDynamicProxy implements Hello {
		    InvocationHandler handler;
		    public HelloDynamicProxy(InvocationHandler handler) {
		        this.handler = handler;
		    }
		    public void morning(String name) {
		        handler.invoke(
		           this,
		           Hello.class.getMethod("morning", String.class),
		           new Object[] { name });
		    }
		}
		其实就是JVM帮我们自动编写了一个上述类（不需要源码，可以直接生成字节码），并不存在可以直接实例化接口的黑魔法。

	反射性能
		JNI
		反射调用优化操作：反射调用时会根据每个反射方法调用生成一个包装了这个方法的类加载器DelegatingClassLoader和Java类MethodAccessor，如果反射方法很多的话，就会生成N多字节码，导致metaspace溢出。java虚拟机会首先使用JNI存取器，然后在反射访问了同一个类若干次后，会改为使用Java字节码存取器，这种当Java虚拟机从JNI存取器改为字节码存取器的行为被称为膨胀（Inflation）。Inflation机制提高了反射的性能，但是对于重度使用反射的项目可能存在隐患，它带来了两个问题：（1）初次加载的性能损失（2）动态加载的字节码导致metaspace持续增长。幸运的是，我们可以通过一个设置-Dsun.reflect.inflationThreshold=N控制这种行为，如果N=0，则总是使用JNI存取器。

		调用Class类的getDeclaredMethod可以获取指定方法名和参数的方法对象Method。每次调用getDeclaredMethod方法返回的Method对象其实都是一个新的对象，且新对象的root属性都指向原来的Method对象，如果需要频繁调用，最好把Method对象缓存起来。Method.invoke()实际上并不是自己实现的反射调用逻辑，而是委托给sun.reflect.MethodAccessor来处理。

		可以看到生成MethodAccessor有两个版本，一个是Java实现的，另一个是native code实现的。Java实现的版本在初始化时需要较多时间，但长久来说性能较好；native版本正好相反，启动时相对较快，但运行时间长了之后速度就比不过Java版了。这是HotSpot的优化方式带来的性能特性，同时也是许多虚拟机的共同点：跨越native边界会对优化有阻碍作用，它就像个黑箱一样让虚拟机难以分析也将其内联，于是运行时间长了之后反而是托管版本的代码更快些。
		为了权衡两个版本的性能，Sun的JDK使用了“inflation”的技巧：让Java方法在被反射调用时，开头15次使用native版，等反射调用次数超过阈值时则生成一个专用的MethodAccessor实现类，生成其中的invoke()方法的字节码，以后对该Java方法的反射调用就会使用Java版。
		generateMethod方法在生成MethodAccessorImpl对象时，会在内存中生成对应的字节码，并调用ClassDefiner.defineClass创建对应的class对象，在ClassDefiner.defineClass方法实现中，每被调用一次都会生成一个DelegatingClassLoader类加载器对象，这里每次都生成新的类加载器，是为了性能考虑，在某些情况下可以卸载这些生成的类，因为类的卸载是只有在类加载器可以被回收的情况下才会被回收的，如果用了原来的类加载器，那可能导致这些新创建的类一直无法被卸载，从其设计来看本身就不希望这些类一直存在内存里的，在需要的时候有就行了。
		参考：https://blog.51cto.com/u_13416/6601777

异常
			                 ┌───────────┐
		                     │  Object   │
		                     └───────────┘
		                           ▲
		                           │
		                     ┌───────────┐
		                     │ Throwable │
		                     └───────────┘
		                           ▲
		                 ┌─────────┴─────────┐
		                 │                   │
		           ┌───────────┐       ┌───────────┐
		           │   Error   │       │ Exception │
		           └───────────┘       └───────────┘
		                 ▲                   ▲
		         ┌───────┘              ┌────┴──────────┐
		         │                      │               │
		┌─────────────────┐    ┌─────────────────┐┌───────────┐
		│OutOfMemoryError │... │RuntimeException ││IOException│...
		└─────────────────┘    └─────────────────┘└───────────┘
		                                ▲
		                    ┌───────────┴─────────────┐
		                    │                         │
		         ┌─────────────────────┐ ┌─────────────────────────┐
		         │NullPointerException │ │IllegalArgumentException │...
		         └─────────────────────┘ └─────────────────────────┘
    Throwable有两个体系：Error和Exception，Error表示严重的错误，程序对此一般无能为力，例如：
	OutOfMemoryError：内存耗尽
	NoClassDefFoundError：无法加载某个Class
	StackOverflowError：栈溢出         
	而Exception则是运行时的错误，它可以被捕获并处理。
	Exception又分为两大类：
	RuntimeException以及它的子类；
	非RuntimeException（包括IOException、ReflectiveOperationException等等）
	Java规定：
	必须捕获的异常，包括Exception及其子类，但不包括RuntimeException及其子类，这种类型的异常称为Checked Exception。
	不需要捕获的异常，包括Error及其子类，RuntimeException及其子类。Error 属于程序无法处理的错误，例如 Java 虚拟机运行错误（Virtual MachineError）、虚拟机内存不够错误(OutOfMemoryError)、类定义错误（NoClassDefFoundError）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。 
	注意：编译器对RuntimeException及其子类不做强制捕获要求，不是指应用程序本身不应该捕获并处理RuntimeException。是否需要捕获，具体问题具体分析。
	java.lang.IllegalArgumentException: java.lang.NullPointerException
    	at Main.process1(Main.java:15)
    	at Main.main(Main.java:5)
	Caused by: java.lang.NullPointerException
	    at Main.process2(Main.java:20)
	    at Main.process1(Main.java:13)
	注意到Caused by: Xxx，说明捕获的IllegalArgumentException并不是造成问题的根源，根源在于NullPointerException，是在Main.process2()方法抛出的。
	在代码中获取原始异常可以使用Throwable.getCause()方法。如果返回null，说明已经是“根异常”了。    

Collection
	各集合底层数据格式：
	ArrayList：Object[] 数组 
	LinkedList： 双向链表
	HashSet：基于 HashMap 实现的，底层采用 HashMap 来保存元素
	TreeSet：红黑树
	PriorityQueue：二叉堆
	ArrayQueue：Object[] 数组 + 双指针
	HashMap： JDK1.8 之前由数组+链表组成的，之后由数组+红黑树
	TreeMap： 红黑树

	Java标准库自带的java.util包提供了集合类：Collection，它是除Map外所有其他集合类的根接口。Java的java.util包主要提供了以下三种类型的集合：
	List：一种有序列表的集合 Set：一种保证没有重复元素的集合 Map：一种通过键值（key-value）查找的映射表集合
	Java集合的设计有几个特点：一是实现了接口和实现类相分离，例如，有序表的接口是List，具体的实现类有ArrayList，LinkedList等，二是支持泛型，我们可以限制在一个集合中只能放入同一种数据类型的元素
	由于Java的集合设计非常久远，中间经历过大规模改进，我们要注意到有一小部分集合类是遗留类，不应该继续使用：
	Hashtable：一种线程安全的Map实现； Vector：一种线程安全的List实现； Stack：基于Vector实现的LIFO的栈。

	List
							ArrayList		LinkedList
		获取指定元素			速度很快			需要从头开始查找元素
		添加元素到末尾		速度很快			速度很快
		在指定位置添加/删除	需要移动元素		不需要移动元素
		内存占用				少				较大

		get(int)方法只有ArrayList的实现是高效的，换成LinkedList后，索引越大，访问速度越慢。所以我们要始终坚持使用迭代器Iterator来访问List。Iterator本身也是一个对象，但它是由List的实例调用iterator()方法的时候创建的。Iterator对象知道如何遍历一个List，并且不同的List类型，返回的Iterator对象实现也是不同的，但总是具有最高的访问效率。
		for (String s : list) {
		    System.out.println(s);
		}
		实际上，Java编译器并不知道for-each代码。上述代码能够编译通过，只是因为编译器把for each循环通过Iterator改写为了普通的for循环：
		for (Iterator<String> it = list.iterator(); it.hasNext(); ) {
		     String s = it.next();
		     System.out.println(s);
		}

		ArrayList 底层使用的是 Object 数组；LinkedList 底层使用的是 双向链表 数据结构
		内存空间占用： ArrayList 的空 间浪费主要体现在在 list 列表的结尾会预留一定的容量空间，而 LinkedList 的空间花费则体现在它的每一个元素都需要消耗比 ArrayList 更多的空间（因为要存放直接后继和直接前驱以及数据）。

		ArrayList
		以无参数构造方法创建ArrayList时，实际上初始化赋值的是一个空数组。当真正对数组进行添加元素操作时，才真正分配容量。即向数组中添加第一个元素时，数组容量扩为10。
		int newCapacity = oldCapacity + (oldCapacity >> 1),所以 ArrayList 每次扩容之后容量都会变为原来的 1.5 倍左右（oldCapacity 为偶数就是 1.5 倍，否则是 1.5 倍左右）！ 奇偶不同，比如 ：10+10/2 = 15, 33+33/2=49。如果是奇数的话会丢掉小数.
		扩容详细过程：
		当我们要 add 进第 1 个元素到 ArrayList 时，elementData.length 为 0 （因为还是一个空的 list），因为执行了 ensureCapacityInternal() 方法 ，所以 minCapacity 此时为 10。此时，minCapacity - elementData.length > 0成立，所以会进入 grow(minCapacity) 方法。
		当 add 第 2 个元素时，minCapacity 为 2，此时 elementData.length(容量)在添加第一个元素后扩容成 10 了。此时，minCapacity - elementData.length > 0 不成立，所以不会进入 （执行）grow(minCapacity) 方法。
		添加第 3、4···到第 10 个元素时，依然不会执行 grow 方法，数组容量都为 10。
		直到添加第 11 个元素，minCapacity(为 11)比 elementData.length（为 10）要大。进入 grow 方法进行扩容。

	Set	
				   ┌───┐
			       │Set│
			       └───┘
			         ▲
			    ┌────┴─────┐
			    │          │
			┌───────┐ ┌─────────┐
			│HashSet│ │SortedSet│
			└───────┘ └─────────┘
			   ▲           ▲
			   │           │
	   ┌─────────────┐  ┌─────────┐
	   │LinkedHashSet│  │ TreeSet │
	   └─────────────┘  └─────────┘	

	Queue
		队列（Queue）是一种经常使用的集合。Queue实际上是实现了一个先进先出（FIFO：First In First Out）的有序表。它和List的区别在于，List可以在任意位置添加和删除元素，而Queue只有两个操作：
		把元素添加到队列末尾；
		从队列头部取出元素。          
		对于具体的实现类，有的Queue有最大队列长度限制，有的Queue没有。注意到添加、删除和获取队列元素总是有两个方法，这是因为在添加或获取元素失败时，这两个方法的行为是不同的。我们用一个表格总结如下：
						   throw Exception		返回false或null
		添加元素到队尾	   add(E e)				boolean offer(E e)
		取队首元素并删除	   E remove()			E poll()
		取队首元素但不删除   E element()			E peek()

		PriorityQueue
		我们放入的顺序是"apple"、"pear"、"banana"，但是取出的顺序却是"apple"、"banana"、"pear"，这是因为从字符串的排序看，"apple"排在最前面，"pear"排在最后面。因此，放入PriorityQueue的元素，必须实现Comparable接口，PriorityQueue会根据元素的排序顺序决定出队的优先级。

		Deque
			我们知道，Queue是队列，只能一头进，另一头出。如果把条件放松一下，允许两头都进，两头都出，这种队列叫双端队列（Double Ended Queue），学名Deque。对于添加元素到队尾的操作，Queue提供了add()/offer()方法，而Deque提供了addLast()/offerLast()方法。添加元素到队首、取队尾元素的操作在Queue中不存在，在Deque中由addFirst()/removeLast()等方法提供。
			我们发现LinkedList真是一个全能选手，它即是List，又是Queue，还是Deque。但是我们在使用的时候，总是用特定的接口来引用它，这是因为持有接口说明代码的抽象层次更高，而且接口本身定义的方法代表了特定的用途。

		BlockingQueue
			阻塞队列（BlockingQueue）是一个支持两个附加操作的队列。这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。
			阻塞队列提供了四种处理方法:

			方法\处理方式		抛出异常		返回特殊值	一直阻塞		超时退出
			插入方法			add(e)		offer(e)	put(e)		offer(e,time,unit)
			移除方法			remove()	poll()		take()		poll(time,unit)
			检查方法			element()	peek()		不可用		不可用

			
	Stack	
		所谓FIFO，是最先进队列的元素一定最早出队列，而LIFO是最后进Stack的元素一定最早出Stack。如何做到这一点呢？只需要把队列的一端封死
		Stack只有入栈和出栈的操作：
		把元素压栈：push(E)；
		把栈顶的元素“弹出”：pop()；
		取栈顶元素但不弹出：peek()。
		在Java中，我们用Deque可以实现Stack的功能：
		把元素压栈：push(E)/addFirst(E)；
		把栈顶的元素“弹出”：pop()/removeFirst()；
		取栈顶元素但不弹出：peek()/peekFirst()。
		为什么Java的集合类没有单独的Stack接口呢？因为有个遗留类名字就叫Stack，出于兼容性考虑，所以没办法创建Stack接口，只能用Deque接口来“模拟”一个Stack了。当我们把Deque作为Stack使用时，注意只调用push()/pop()/peek()方法，不要调用addFirst()/removeFirst()/peekFirst()方法，这样代码更加清晰。
		栈的应用：进制转换 计算后缀表达式

Map

	HashMap
		扩容
		HashMap在new后并不会立即分配bucket数组，而是第一次put时初始化，类似ArrayList在第一次add时分配空间。
		由于扩容会导致重新分布已有的key-value，所以，频繁扩容对HashMap的性能影响很大。如果我们确定要使用一个容量为10000个key-value的HashMap，更好的方式是创建HashMap时就指定容量：Map<String, Integer> map = new HashMap<>(10000);虽然指定容量是10000，但HashMap内部的数组长度总是2n，因此，实际数组长度被初始化为比10000大的16384（214）。
		HashMap 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。
		JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）时，将链表转化为红黑树（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树），以减少搜索时间（后文中我会结合源码对这一过程进行分析）。

		JDK1.8之前
		JDK1.8 之前 HashMap 底层是 数组和链表 结合在一起使用也就是 链表散列。HashMap 通过 key 的 hashcode 经过扰动函数处理过后得到 hash 值，然后通过 (n - 1) & hash 判断当前元素存放的位置（这里的 n 指的是数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash 值以及 key 是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。所谓扰动函数指的就是 HashMap 的 hash 方法。使用 hash 方法也就是扰动函数是为了防止一些实现比较差的 hashCode() 方法 换句话说使用扰动函数之后可以减少碰撞。
		所谓 “拉链法” 就是：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。

		JDK1.8 之后
		相比于之前的版本， JDK1.8 之后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。
		TreeMap、TreeSet 以及 JDK1.8 之后的 HashMap 底层都用到了红黑树。红黑树就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。

		HashMap的长度为什么是2的幂次方？
		用通俗的言语来描述就是,对2的倍数取模，只要将数与2的倍数-1做按位与运算即可。
		用位运算 & 取代 % 取模
		X % 2^n = X & (2^n – 1) 注意：用位运算 & 来取代 % 取模需要被取模的数必须是2的幂才成立
		为什么位运算(&)可以实现取模运算(%)？
		X % 2^ n = X & (2^ n – 1)
		2^n表示2的n次方，也就是说，一个数对2^n取模 == 一个数和(2^n – 1)做按位与运算。
		假设n为3，则2^3 = 8，表示成2进制就是1000。2^3-1 = 7，即0111。
		此时X & (2^3 – 1) 就相当于取X的2进制的最后三位数。
		从2进制角度来看，X / 8相当于 X >> 3，即把X右移3位，此时得到了X/8的商，而被移掉的部分(后三位)，则是X % 8，也就是余数。

		为什么扩容要扩容到原来的两倍？
		因为老数组里的数据移动到新的数组时，位置要么不变，要么变为 index+oldSize

		扰动函数
		static final int hash(Object key) {
		    int h;
		    // key.hashCode()：返回散列值也就是hashcode
		    // ^ ：按位异或
		    // >>>:无符号右移，忽略符号位，空位都以0补齐
		    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
		}
		这个操作是把key的hashcode值与hashcode值右移16位做异或，目的就是把哈希值的高位和低位一起混合计算，使生成的hash值更离散

		loadFactor加载因子
		loadFactor 加载因子是控制数组存放数据的疏密程度，loadFactor 越趋近于 1，那么 数组中存放的数据(entry)也就越多，也就越密，也就是会让链表的长度增加，loadFactor 越小，也就是趋近于 0，数组中存放的数据(entry)也就越少，也就越稀疏。
		loadFactor 太大导致查找元素效率低，太小导致数组的利用率低，存放的数据会很分散。loadFactor 的默认值为 0.75f 是官方给出的一个比较好的临界值。
		给定的默认容量为 16，负载因子为 0.75。Map 在使用过程中不断的往里面存放数据，当数量达到了 16 * 0.75 = 12 就需要将当前 16 的容量进行扩容

		put方法
		1.如果定位到的数组位置没有元素 就直接插入。
		2.如果定位到的数组位置有元素就和要插入的 key 比较，如果 key 相同就直接覆盖，如果 key 不相同，就判断 p 是否是一个树节点，如果是就调用e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value)将元素添加进入。如果不是就遍历链表插入(插入的是链表尾部)。


		HashMap多线程操作导致死循环问题
		主要原因在于并发下的 Rehash 会造成元素之间会形成一个循环链表。不过，jdk 1.8 后解决了这个问题，但是还是不建议在多线程下使用 HashMap,因为多线程下使用 HashMap 还是会存在其他问题比如数据丢失。并发环境下推荐使用 ConcurrentHashMap 。


	TreeMap
		   ┌───┐
	       │Map│
	       └───┘
	         ▲
	    ┌────┴─────┐
	    │          │
	┌───────┐ ┌─────────┐
	│HashMap│ │SortedMap│
	└───────┘ └─────────┘
	               ▲
	               │
	          ┌─────────┐
	          │ TreeMap │
	          └─────────┘
		SortedMap保证遍历时以Key的顺序来进行排序。例如，放入的Key是"apple"、"pear"、"orange"，遍历的顺序一定是"apple"、"orange"、"pear"，因为String默认按字母排序，使用TreeMap时，放入的Key必须实现Comparable接口。String、Integer这些类已经实现了Comparable接口，因此可以直接作为Key使用。作为Value的对象则没有任何要求。如果作为Key的class没有实现Comparable接口，那么，必须在创建TreeMap时同时指定一个自定义排序算法



	ConcurrentHashMap 
		底层数据结构
		JDK1.7的ConcurrentHashMap底层采用分段的数组+链表实现，JDK1.8采用的数据结构跟HashMap1.8的结构一样，数组+链表/红黑二叉树。
		实现线程安全的方式
		在 JDK1.7 的时候，ConcurrentHashMap 对整个桶数组进行了分割分段(Segment，分段锁)，每一把锁只锁容器其中一部分数据（下面有示意图），多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。
		到了 JDK1.8 的时候，ConcurrentHashMap 已经摒弃了 Segment 的概念，而是直接用 Node数组+链表+红黑树的数据结构来实现，并发控制使用 synchronized 和 CAS 来操作。（JDK1.6 以后 synchronized 锁做了很多优化） 整个看起来就像是优化过且线程安全的 HashMap，虽然在 JDK1.8 中还能看到 Segment 的数据结构，但是已经简化了属性，只是为了兼容旧版本；
		JDK1.8 的 ConcurrentHashMap 不再是 Segment 数组 + HashEntry 数组 + 链表，而是 Node 数组 + 链表 / 红黑树。不过，Node 只能用于链表的情况，红黑树的情况需要使用 **TreeNode**。当冲突链表达到一定长度时，链表会转换成红黑树。
		TreeNode是存储红黑树节点，被TreeBin包装。TreeBin通过root属性维护红黑树的根结点，因为红黑树在旋转的时候，根结点可能会被它原来的子节点替换掉，在这个时间点，如果有其他线程要写这棵红黑树就会发生线程不安全问题，所以在 ConcurrentHashMap 中TreeBin通过waiter属性维护当前使用这棵红黑树的线程，来防止其他线程的进入。
		static final class TreeBin<K,V> extends Node<K,V> {
	        TreeNode<K,V> root;
	        volatile TreeNode<K,V> first;
	        volatile Thread waiter;
	        volatile int lockState;
	        // values for lockState
	        static final int WRITER = 1; // set while holding write lock
	        static final int WAITER = 2; // set when waiting for write lock
	        static final int READER = 4; // increment value for setting read lock
		}
		所以Java 8 中，ConcurrentHashMap锁粒度更细，synchronized 只锁定当前链表或红黑二叉树的首节点，这样只要 hash 不冲突，就不会产生并发，就不会影响其他 Node 的读写，效率大幅提升。

Collections
	Collections提供了多个synchronizedXxx()方法·，该方法可以将指定集合包装成线程同步的集合，从而解决多线程并发访问集合时的线程安全问题。
	我们知道HashSet，TreeSet，ArrayList,LinkedList,HashMap,TreeMap都是线程不安全的。Collections提供了多个静态方法可以把他们包装成线程同步的集合。
	最好不要用下面这些方法，效率非常低，需要线程安全的集合类型时请考虑使用 JUC 包下的并发集合。
	synchronizedCollection(Collection<T>  c) //返回指定 collection 支持的同步（线程安全的）collection。
	synchronizedList(List<T> list)//返回指定列表支持的同步（线程安全的）List。
	synchronizedMap(Map<K,V> m) //返回由指定映射支持的同步（线程安全的）Map。
	synchronizedSet(Set<T> s) //返回指定 set 支持的同步（线程安全的）set。
